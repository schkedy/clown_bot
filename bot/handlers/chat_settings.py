import json
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = 'bot_data.json'

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as file:
                return json.load(file)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            return {'bot_added_by': {}, 'target_users': {}}
    return {'bot_added_by': {}, 'target_users': {}}

def save_data(data):
    with open(DATA_FILE, 'w') as file:
        json.dump(data, file)

async def add_target_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞
    bot_added_by = data['bot_added_by'].get(str(chat_id))
    if user_id != bot_added_by:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ, —Ç–µ–±–µ –Ω–µ–ª—å–∑—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=chat_id, text="–ù–æ–≤—ã—Ö –∫–ª–æ—É–Ω–æ–≤ –Ω–µ –≤–∏–¥–Ω–æ")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ä–µ–ø–ª–∞–π
        replied_message = update.message.reply_to_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if not replied_message.from_user:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        target_user = replied_message.from_user
        target_user_id = target_user.id
        target_user_name = target_user.full_name or target_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if str(chat_id) not in data['target_users']:
            data['target_users'][str(chat_id)] = []
        
        target_users = data['target_users'][str(chat_id)]
        if target_user_id not in target_users:
            target_users.append(target_user_id)
            save_data(data)
            await context.bot.send_message(chat_id=chat_id, text=f"{target_user_name} —Å—Ç–∞–ª –∫–ª–æ—É–Ω–æ–º ü§°")
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"{target_user_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–æ—É–Ω–æ–º ü§°")
        
        await update.message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∫–ª–æ—É–Ω–æ–º, –ø–æ–∫–∞...")

async def remove_target_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞
    bot_added_by = data['bot_added_by'].get(str(chat_id))
    if user_id != bot_added_by:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ, —Ç–µ–±–µ –Ω–µ–ª—å–∑—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_user_id = target_user.id
        target_user_name = target_user.full_name
    else:
        await context.bot.send_message(chat_id=chat_id, text="–Ø –Ω–µ –ø–æ–Ω—è–ª, –∫–æ–≥–æ —Ç—ã –ø–µ—Ä–µ—Å—Ç–∞–ª —Å—á–∏—Ç–∞—Ç—å –∫–ª–æ—É–Ω–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if str(chat_id) not in data['target_users']:
        data['target_users'][str(chat_id)] = []
    
    target_users = data['target_users'][str(chat_id)]
    if target_user_id in target_users:
        target_users.remove(target_user_id)
        save_data(data)
        await context.bot.send_message(chat_id=chat_id, text=f"{target_user_name} –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç–∞–ª –±—ã—Ç—å –∫–ª–æ—É–Ω–æ–º")
    else:
        await context.bot.send_message(chat_id=chat_id, text=f"{target_user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∫–ª–æ—É–Ω–æ–≤.")
    
    await update.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
async def track_bot_added(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.new_chat_members:
            for member in update.message.new_chat_members:
                if member.id == context.bot.id:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    data = load_data()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞
                    data['bot_added_by'][str(update.effective_chat.id)] = update.effective_user.id
                    save_data(data)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ê —Å–µ–π—á–∞—Å –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∫–ª–æ—É–Ω–æ–≤..."
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}") 